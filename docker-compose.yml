version: '2.1'

services:
  zoo-local:
    image: confluentinc/cp-zookeeper:7.3.2
    hostname: zoo-local
    container_name: zoo-local
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo-local:2888:3888

  kafka-local:
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka-local
    container_name: kafka-local
    depends_on:
      - zoo-local
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-local:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo-local:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
      KAFKA_MESSAGE_MAX_BYTES: 5242880

  local-schema-registry:
    image: confluentinc/cp-schema-registry:latest
    depends_on:
      - kafka-local
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka-local:19092
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

  postgres-local:
    image: postgres:14-alpine
    ports:
      - 5432:5432
    volumes:
      - ~/apps/postgres:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=local-test
      - POSTGRES_USER=local-test
      - POSTGRES_DB=local-test

  redis-local:
    image: docker.io/bitnami/redis:7.2
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
      - REDIS_DISABLE_COMMANDS=FLUSHDB,FLUSHALL
    ports:
      - '6379:6379'
    volumes:
      - 'redis_data:/bitnami/redis/data'

  mongo-local:
    image: circleci/mongo
    container_name: mongo-local
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=example

  flume-local:
    build:
      context: ./flume-custom
    container_name: flume-local
    ports:
      - "41414:41414"
    depends_on:
      - kafka-local
    volumes:
      - tomcat_logs:/logs

  spark-local:
    image: bitnami/spark:latest
    container_name: spark-local
    ports:
      - "8080:8080"   # Spark UI
      - "7077:7077"   # Spark Master port
    environment:
      - SPARK_MODE=master
    volumes:
      - spark_data:/opt/spark/work-dir

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:5.6.2
    environment:
      - discovery.type=single-node
    ports:
      - "9200:9200"
      - "9300:9300"

  businessserver:
    build:
      context: .
      dockerfile: businessServer/Dockerfile
    ports:
      - "8088:8088"
    depends_on:
      - mongo-local
      - redis-local
      - elasticsearch
    environment:
      - SPRING_DATA_MONGODB_HOST=mongo-local
      - SPRING_DATA_MONGODB_PORT=27017
      - SPRING_REDIS_HOST=redis-local
      - ES_HOST=elasticsearch
    volumes:
      - tomcat_logs:/usr/local/tomcat/logs

  azkaban:
    image: rea1shane/azkaban-solo-server:3.90.0
    container_name: azkaban-local
    ports:
      - "8089:8081"

volumes:
  redis_data:
    driver: local
  mongo_data:
    driver: local
  spark_data:
    driver: local
  tomcat_logs:
